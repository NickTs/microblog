Мега-Учебник Flask, Часть 1: Привет, Мир!
https://habr.com/post/193242/

Теперь нам нужно установить Flask и несколько расширений, которые мы будем использовать. Я предпочитаю создание виртуального окружения, 
где все это будет установлено таким образом, что ваша основная установка Python затронута не будет. 
Итак, открываем терминал, выбираем место, где будет ваше приложение, и создаем новую папку, в которой оно будет содержаться. Назовем эту папку microblog.

pip install virtualenv
virtualenv venv
source ./venv/bin/activate

rm -rf ./venv && virtualenv -p python2.7 --no-site-packages venv && source ./venv/bin/activate

pip install virtualenv
pip install --upgrade pip

cd /mnt/h/prj/tmp/ && mkdir microblog && cd ./microblog/
rm -rf ./venv && virtualenv -p python2.7 --no-site-packages venv && source ./venv/bin/activate

vi requirements.txt

flask==0.9
flask-login
flask-openid
flask-mail
sqlalchemy==0.7.9
flask-sqlalchemy==0.16
sqlalchemy-migrate
flask-whooshalchemy==0.54a
flask-wtf==0.8.4
pytz==2013b
flask-babel==0.8
flup

pip install -r requirements.txt
pip install -e .

«Hello, World!» в Flask

Теперь у вас есть подпапка venv, в вашей папке microblog, содержащая интерпретатор Python и фреймворк Flask с расширениями, 
которые мы будем использовать в этом приложении. Настало время написать наше первое веб-приложение!

После того как вы переместились папку microblog, давайте создадим основную структуру папок для нашего приложения:

mkdir app
mkdir app/static
mkdir app/templates
mkdir tmp

В папку app мы поместим само наше приложение. Подпапка static нужна для хранения статики, такой как картинки, javascript файлы и таблицы стилей. 
Подпапка templates, очевидно, предназначена для хранения наших шаблонов.
Давайте начнем с создания простого скрипта инициализации нашего пакета app (файл app/__init__.py)

vi app/__init__.py

from flask import Flask

app = Flask(__name__)
from app import views

Скрипт выше просто создает объект приложения (наследуя Flask), затем импортирует модуль представлений, который мы еще не написали.
Представления — это обработчики, которые отвечают на запросы веб-браузера. Представления в Flask пишутся как Python функции. 
Каждая функция представления сопоставляется с одним или несколькими запросами URL.
Напишем нашу первую функцию представления (файл app/views.py)

vi app/views.py

from app import app

@app.route('/')
@app.route('/index')
def index():
    return "Hello, World!"

Это весьма простое представление, которое просто возвращает строку для отображения в пользовательском браузере. 
Два декоратора route создают привязку адресов / и /index к этой функции.
Последним шагом для получения полностью работающего веб-приложения будет создание скрипта, который стартует веб-сервер нашего приложения. 
Давайте назовем скрипт run.py и положим его в корневой каталог (microblog/):

vi run.py

#!venv/bin/python
from app import app
app.run(debug = True)

Скрипт просто импортирует переменную app из нашего пакета app и вызывает метод run для того, чтобы запустить сервер. 
Помните, что переменная app — экземпляр класса Flask, мы создали его выше.
Для запуска вашего приложения просто запустите скрипт. На OS X, Linux и Cygwin вам следует пометить файл исполняемым перед тем как вы сможете его запустить.

chmod a+x run.py

Тогда скрипт может быть вызван просто:

./run.py

В Windows процесс немного отличается. Нет необходимости помечать файл исполняемым. 
Вместо этого вам нужно запустить скрипт как аргумент интерпретатора Python:

flask/Scripts/python run.py

После старта сервер будет прослушивать порт 5000, ожидая соединений. Теперь откроем браузер и введем следующий URL в адресную строку:

http://localhost:5000/index

Теперь вы увидели маршрутизацию в действии? Первый URL привязан к /, в то время как второй к /index. 
Оба маршрута ассоциированы с нашей функцией представления, поэтому они дают одинаковый результат. 
Если вы введете любой другой маршрут, то получите ошибку, так как только эти два были привязаны к функции представления.
